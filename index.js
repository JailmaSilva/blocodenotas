// JavaScript Trybe:
let oQueEhProgramar = "O que √© programar?";
// O que √© programar: dar ordens para que os computadores fa√ßam o que voc√™ quer que eles fa√ßam, de forma bem detalhada. Uma das linguagens que permitem escrever programas √© o JavaScript, uma das mais predominantes no mercado.
let historiaDoJs = "Hist√≥ria do JavaScript";
//Historia do JavaScript:O JavaScript foi criado em 1995, por Brendan Eich, com o objetivo de deixar as p√°ginas da web mais interativas e din√¢micas, pois at√© ent√£o elas s√≥ apresentavam conte√∫do est√°tico. Sua cria√ß√£o foi um sucesso, e a linguagem efetivamente transformou a forma como usamos a web. Hoje, todos os navegadores t√™m suporte ao JavaScript e ele √© o principal respons√°vel pelas intera√ß√µes de pessoas usu√°rias com aplica√ß√µes dispon√≠veis na web.
let papelDoJavaScript = "Papel do JavaScript no Dev web";
//O papel do JavaScript no Desenvolvimento Web
//Ao acessar uma p√°gina, voc√™ pode ver e interagir com diversos conte√∫dos, desde o bot√£o play do YouTube at√© este texto que voc√™ est√° lendo agora. Todo c√≥digo respons√°vel por exibir algum conte√∫do na tela do seu computador ou celular e que permita que voc√™ interaja com ele faz parte do que chamamos de front-end.

//Para que uma p√°gina web funcione, √© preciso ter recursos e dados para serem exibidos. Para isso, o back-end entra em a√ß√£o: √© ele que recebe as solicita√ß√µes vindas do front-end, busca essas informa√ß√µes onde estiverem armazenadas e as devolve para serem exibidas na tela.

//Imagine que voc√™ est√° em um restaurante e faz o pedido para o gar√ßom, que leva seu pedido at√© a cozinha. A cozinha prepara a sua refei√ß√£o e o gar√ßom traz para voc√™. Nesse caso, o gar√ßom √© o front-end. A cozinha, que recebe seu pedido, prepara e informa o gar√ßom para entregar para voc√™, √© o back-end. 

//Por exemplo, ao realizar seu login em uma rede social, o front-end √© respons√°vel por realizar a coleta dos dados e enviar ao back-end, que verifica se suas credenciais est√£o corretas e devolve informa√ß√µes do seu perfil para o front-end, que as carrega e exibe na tela. Atualmente o JavaScript √© utilizado tanto para front-end quanto para back-end. Por isso, ao aprender a programar com essa linguagem, voc√™ est√° se preparando para trabalhar nesses dois contextos dentro do desenvolvimento web! 
let nome = 'O potencial JavaScript no mercado de trabalho';
//O potencial do JavaScript no mercado de trabalho
//A versatilidade √© algo que se destaca no JavaScript, que pode ser utilizado em laptops, smartphones, videogames, aplicativos, entre outros.

//Muitas empresas de tecnologia t√™m ao menos parte do seu c√≥digo escrito em JavaScript, incluindo gigantes da tecnologia como Netflix, Facebook, Google, Microsoft, LinkedIn e Uber.

//O Facebook e o Google utilizam tanto o JavaScript que criaram ferramentas pr√≥prias para trabalhar melhor com a linguagem. Hoje essas ferramentas s√£o p√∫blicas e est√£o dispon√≠veis para que voc√™ as utilize para construir suas pr√≥prias p√°ginas e aplica√ß√µes.

//E tem mais! Estudos apontam que, at√© 2025, ser√£o criadas cerca de 797 mil vagas de T.I., e o Brasil forma apenas 53 mil pessoas por ano na √°rea.
let variaveisEhConstantes = "Variaveis e constantes";
//Por que isso √© importante?
//O conceito de vari√°veis est√° entre os conceitos mais importantes ao escrever c√≥digo para programas. Vari√°veis s√£o como caixas que guardam informa√ß√µes na mem√≥ria do computador e que podem ser utilizadas em todas as partes do programa.

//Voc√™ provavelmente interage com sistemas que guardam informa√ß√µes nessas caixas:

//Seu nome de usu√°rio quando faz o login no seu computador;
//O n√∫mero da sua conta quando voc√™ acessa o sistema de um banco;
//Uma mensagem enviada por um aplicativo podem ser encontradas guardadas em vari√°veis.
//Entre essas e outras situa√ß√µes, as vari√°veis est√£o presentes no seu dia a dia e voc√™ nem percebe! ü•∏
let oQueSao = "variaveis"
//O que s√£o vari√°veis?
//Vari√°veis s√£o espa√ßos na mem√≥ria do computador que funcionam como caixas que possuem um nome e que podemos guardar alguma coisa dentro.

//Para compreender melhor o funcionamento de uma vari√°vel, imagine o seguinte cen√°rio:

//Uma loja virtual vende presentes, como roupas, canecas e chaveiros. Para fazer uma entrega, o item comprado √© colocado dentro de uma caixa, que possui uma etiqueta com a descri√ß√£o do que tem dentro dela:
//Vamos supor que √© preciso fazer uma entrega de um produto para um cliente: temos a caixa que possui uma etiqueta de nome roupa e o produto a ser entregue, que √© uma camiseta.

//Podemos imaginar vari√°veis exatamente dessa mesma forma:

//A caixa √© a vari√°vel, que possui uma etiqueta representando o nome da vari√°vel: roupa;
//O valor dessa vari√°vel √© o que est√° dentro da caixa: camiseta.
let declararVariavel = "Declarar Variavel";
// Anota ai: Declarar uma v√°riavel √© o mesmo que dizer 'criar uma v√°riavel' Em programa√ß√£o, declarar signica dizer ao computador para reservar um espa√ßo na mem√≥ria para armazenar um dado.
let name = "let";
// "let" √© utilizada para declarar uma vari√°vel. Ela √© colocada antes do nome da vari√°vel para informar ao computador que ela deve ser criada.
//Vamos analisar o c√≥digo:

//let √© uma palavra-chave utilizada para declarar uma vari√°vel. Ela √© colocada antes do nome da vari√°vel para informar ao computador que ela deve ser criada;
//roupa se refere ao nome da vari√°vel. Nesse caso, a caixa que representa a vari√°vel tem o nome roupa.
//=, √© o operador de atribui√ß√£o. Atribui o valor 'camiseta' √† vari√°vel roupa.
//camiseta √© o valor atribu√≠do √† vari√°vel, ou seja, o produto que √© colocado dentro da caixa. Nesse caso, o conte√∫do da caixa √© uma 'camiseta'.
//Por fim, o ponto e v√≠rgula ; completa a estrutura. Esse sinal gr√°fico indica, na linguagem JavaScript, que voc√™ terminou de escrever aquela linha.
//E se quisermos alterar o valor da vari√°vel, √© poss√≠vel? ü§î A resposta √©: sim! üò∏

//Voltando ao cen√°rio da loja virtual, imagine que o comprador da camiseta quis fazer a troca do produto, antes mesmo do envio, e solicitou que a camiseta fosse trocada por um moletom. Sendo assim, o valor antigo 'camiseta' foi substitu√≠do por outro valor, o 'moletom'.

//As vari√°veis guardam somente um √∫nico valor por vez, que pode ser trocado por outro. Toda vez que for preciso colocar um novo valor dentro da vari√°vel, o anterior ser√° substitu√≠do.
//Anota a√≠ üì£: As vari√°veis guardam somente um √∫nico valor e, toda vez que a vari√°vel receber um novo valor, o antigo √© substitu√≠do.

//Veja como ficaria no c√≥digo a atribui√ß√£o do novo valor 'moletom' √† vari√°vel 'roupa'
//Percebeu que nesse caso n√£o utilizamos a palavra let?

//A palavra-chave √© utilizada somente quando a vari√°vel √© declarada, ou seja, quando voc√™ escreve ela no c√≥digo pela primeira vez. Para reatribuir um valor √† uma vari√°vel, a palavra-chave n√£o deve ser repetida.

//Legal, n√©? Agora a vari√°vel roupa passou a ter um novo valor: 'moletom'.
let diferencaDePalavras = "var, const, let";
//Diferen√ßas entre as palavras-chave var, let e const
//Existem tr√™s palavras-chave que voc√™ pode utilizar para declarar vari√°veis: var, let e const.

//As palavras-chave let e const foram introduzidas √† linguagem JavaScript em 2015. Antes disso s√≥ era poss√≠vel usar a palavra-chave var.

//Como o var √© mais antigo, mas ainda h√° muito c√≥digo escrito com ele, √© importante conhecer essa palavra-chave. O let possui algumas vantagens em rela√ß√£o ao var e hoje em dia, √© uma boa pr√°tica utilizar somente let e const para declarar vari√°veis. üòÑ

//Vamos agora descobrir a diferen√ßa entre var, let e const:

//O var tem praticamente as mesmas funcionalidades que o let:
//Uma vez que voc√™ declarou uma vari√°vel com o var voc√™ tamb√©m pode atribuir um novo valor a ela quando precisar:
//A const tem uma diferen√ßa: uma caracter√≠stica dessa palavra-chave √© que ela √© uma constante. Isto significa que, uma vez que essa vari√°vel √© declarada, o valor dela n√£o poder√° ser alterado.
//Anota a√≠ üì£: Com a palavra-chave let voc√™ poder√° reatribuir valores √† sua vari√°vel quantas vezes quiser. Com a palavra-chave const voc√™ s√≥ poder√° atribuir o valor uma √∫nica vez.
let tiposPrimitivos = "Tipos primitivos"
//Por que isso √© importante?
//Assim como em qualquer linguagem de programa√ß√£o, o JavaScript lida com n√∫meros, frases e outros tipos de valores que representam elementos da vida real, como, por exemplo, a idade e o nome de uma pessoa.

//Para implementar c√≥digos, √© fundamental conhecer os tipos de dados que est√£o dispon√≠veis e como trabalhar com cada um deles.

//Tipos Primitivos no JavaScript
//Ao utilizar computa√ß√£o para resolver problemas, √© necess√°rio representar informa√ß√µes da vida real, como n√∫meros e textos. √â para isso que os tipos primitivos servem, para que voc√™ consiga representar algo do mundo real em formato de c√≥digo.

//Em JavaScript, os tipos primitivos que voc√™ mais ir√° encontrar s√£o os seguintes:

//string: sequ√™ncias de caracteres, como palavras, textos, senhas, etc.;
//number: n√∫meros, podendo ser positivos ou negativos, inteiros ou decimais;
//boolean: pode ser representado apenas pelos valores verdadeiro (true) ou falso (false).
//Existem tamb√©m alguns tipos que representam dados que possuem valores nulos ou valores indefinidos:

//null: √© um valor atribu√≠do como nulo, ou seja, √© um valor vazio;
//undefined: n√£o possui um valor, ou seja, √© um dado que n√£o foi definido.
//Testando o tipo de uma vari√°vel
//Existe um operador no JavaScript chamado typeof, que identifica o tipo de uma vari√°vel!
let string = "String";
//Tipo primitivo string
//Valores do tipo string s√£o sequ√™ncias de caracteres, escritos entre aspas simples (‚Äò) ou duplas (‚Äú). Podem ser palavras, frases, textos inteiros, etc.
//De olho na dica üëÄ : Qualquer valor ser√° do tipo string se for escrito entre aspas.
let number = "number";
//Tipo primitivo number
//Em JavaScript, o tipo number pode representar duas categorias de n√∫meros:

//n√∫meros inteiros, como 3;
//n√∫meros decimais, como 5.5.
//Anota a√≠  : O separador decimal usado em linguagens de programa√ß√£o √© o ponto, e n√£o a v√≠rgula.
let boolean = 'boolean';
//O tipo boolean, ou booleano em portugu√™s, √© um tipo que s√≥ pode assumir os valores verdadeiro ou falso. No contexto do JavaScript, o valor verdadeiro √© true, e falso √© false.

 null = 'null';
//Tipo primitivo null
//Em certas situa√ß√µes, precisamos lidar no c√≥digo com vari√°veis que ainda n√£o sabemos o valor que ela vai receber. Para isso, existe o valor null, que faz com que a vari√°vel tenha um valor nulo.
let undefined = 'undefined';
//Tipo primitivo undefined
//O tipo undefined √© atribu√≠do pelo JavaScript a vari√°veis que n√£o possuem um valor ou que n√£o foram declaradas, ou seja, s√£o indefinidas. 
let operadoresAritmeticos = "operadores aritmeticos"
//Por que isso √© importante?
//Voc√™ acha que para trabalhar com desenvolvimento √© necess√°rio ter um dom na matem√°tica e dominar todas as opera√ß√µes poss√≠veis? N√£o √© bem assim!

//Uma pessoa programadora pode desenvolver l√≥gicas inteiras sabendo apenas o fundamental da matem√°tica, ou at√© mesmo n√£o sabendo nada! Mesmo assim, voc√™ deve ter em mente que essa t√£o amada √°rea do conhecimento tem grande import√¢ncia para a programa√ß√£o.

//Na programa√ß√£o, os operadores aritm√©ticos s√£o essenciais para que seja poss√≠vel realizar opera√ß√µes para manipular dados com o objetivo de chegar ao resultado final desejado. Vamos usar o poder dos operadores a nosso favor?

//Opera√ß√µes Aritm√©ticas no JavaScript
//Em JavaScript, a matem√°tica n√£o √© muito diferente da dos livros. Opera√ß√µes, como adi√ß√£o ou subtra√ß√£o, s√£o casualmente usadas para desenvolver algoritmos capazes de manipular valores, sejam eles n√∫meros ou n√£o.

//Observe como podemos usar as quatro opera√ß√µes fundamentais (soma, subtra√ß√£o, multiplica√ß√£o e divis√£o) em JavaScript:

//De olho na dica üëÄ : Use o console do navegador para praticar essas opera√ß√µes e analisar o que √© retornado.

//Os s√≠mbolos (+, -, *, e /) s√£o o que chamamos de operadores aritm√©ticos. Eles s√£o utilizados para fazer opera√ß√µes com dois valores e produzir um novo valor √∫nico.

//ü§î Opa! Ent√£o n√£o √© poss√≠vel fazer opera√ß√µes com mais de dois valores?

//Sim! √â poss√≠vel! Na programa√ß√£o, assim como na matem√°tica, opera√ß√µes como 2 + 2 - 2 * 4 / 2 existem, e para que a opera√ß√£o retorne o resultado correto utilizamos o conceito de ‚Äúordem de preced√™ncia‚Äù, ou seja, calcula-se primeiro a multiplica√ß√£o e a divis√£o, depois a soma e a subtra√ß√£o.

//ü§ö E se precisarmos calcular primeiro a opera√ß√£o de soma e de subtra√ß√£o para s√≥ depois calcular a opera√ß√£o de multiplica√ß√£o e de divis√£o?

//Para isso, podemos definir uma opera√ß√£o como prioridade usando os par√™nteses (). Dessa forma, pode-se mudar a opera√ß√£o para (2 + 2 - 2) * 4 / 2. Nesse caso, as opera√ß√µes de dentro dos par√™nteses (soma e subtra√ß√£o) ser√£o calculadas primeiro, e s√≥ ent√£o o resultado √© multiplicado por 4 e dividido por 2.

//Dependendo dos operadores presentes em uma opera√ß√£o e do posicionamento deles, √© poss√≠vel chegar a diferentes resultados. 
//Anota a√≠ üì£ : na matem√°tica existe um macete para saber a ordem de preced√™ncia das opera√ß√µes, o famoso ‚ÄòPEMDAS‚Äô:
// Obs: se a multiplica√ß√£o e a divis√£o, ou a soma e a subtra√ß√£o, estiverem na mesma opera√ß√£o, deve-se calcular da esquerda para a direita.

//Outro operador que pode ser utilizado em JavaScript √© o **, respons√°vel por realizar opera√ß√µes de exponencia√ß√£o. A exponencia√ß√£o (ou potencia√ß√£o) ocorre quando um dado n√∫mero √© multiplicado por ele mesmo, uma quantidade n de vezes
//pera√ß√µes de m√≥dulo
//A opera√ß√£o de m√≥dulo encontra o resto da divis√£o de um n√∫mero por outro. √â poss√≠vel encontrar o m√≥dulo de uma divis√£o usando o operador de porcentagem (%). Por exemplo, o m√≥dulo de 4 divido por 2 √© 0 (4 % 2 = 0), j√° o m√≥dulo de 4 divido por 3 √© 1 (4 % 3 = 1).
//Usando Opera√ß√µes Aritm√©ticas para alterar valores no JavaScript
//Em qualquer algoritmo que envolva manipula√ß√£o de dados, provavelmente haver√° uma opera√ß√£o aritm√©tica, mesmo que esses dados n√£o sejam num√©ricos. Uma opera√ß√£o aritm√©tica √© toda a√ß√£o que manipula e modifica valores usando os operadores aritm√©ticos.

//Quando uma opera√ß√£o √© realizada, o valor retornado por essa opera√ß√£o geralmente √© armazenado em uma vari√°vel para que possa ser usada em alguma l√≥gica do c√≥digo. Por exemplo, no c√≥digo abaixo, o valor retornado pela opera√ß√£o de soma √© salvo na vari√°vel soma.
let operadoresDeComparacao = 'operadores de comparacao';
//Comparar valores
//Quando desejamos obter o resultado da compara√ß√£o entre dois valores, usamos pequenas express√µes chamadas de Operadores de Compara√ß√£o.

//A estrutura de uma express√£o desse tipo segue o seguinte formato ‚¨áÔ∏è :

//Copiar
//[valor] [operador de compara√ß√£o] [valor]
//Quando usamos esse formato de compara√ß√£o, temos a possibilidade de tomar diferentes decis√µes ao longo do fluxo do programa. Os Operadores de Compara√ß√£o n√£o s√£o usados somente no contexto de programa√ß√£o, provavelmente voc√™ j√° chegou a v√™-los na Educa√ß√£o B√°sica. Confira a fun√ß√£o de cada um deles abaixo:

//=== para comparar estritamente a igualdade entre dois valores;
//!== para comparar estritamente a diferen√ßa entre dois valores;
//> para comparar se um valor √© maior do que o outro;
//< para comparar se um valor √© menor do que o outro;
//>= para comparar se um valor √© maior ou igual do que o outro;
//<= para comparar se um valor √© menor ou igual do que o outro.
//O processo de compara√ß√£o ocorre com o acr√©scimo do Operador de Compara√ß√£o entre dois valores. Sua fun√ß√£o na estrutura √© comparar o valor √† esquerda com o valor √† direita, assim como mostra o exemplo a seguir:

//Copiar
7 < 10 // 7 √© menor que 10 (verdadeiro), ent√£o retorna true.
7 > 10 // 7 √© maior que 10 (falso), ent√£o retorna false. 
//Vamos ver como funciona na pr√°tica?

//Imagine que voc√™ precisa verificar a maioridade de uma pessoa. No Brasil, uma pessoa nessa condi√ß√£o tem 18 anos completos, ou seja, a pessoa que voc√™ vai verificar precisa estar dentro desse crit√©rio.

//Talvez voc√™ tenha pensado na seguinte express√£o:

//‚ÄúA idade da pessoa √© maior ou igual a 18 anos?‚Äù
//Primeiro, vamos supor que a pessoa que est√° sendo verificada tenha 17 anos. Convertendo simula√ß√£o para c√≥digo, temos:

//Copiar
//const idadeDaPessoa = 17;
//const idadeMaioridade = 18;

const verificaMaioridade = idadeDaPessoa >= idadeMaioridade; // aqui estamos verificando se idadeDaPessoa √© maior ou igual que idadeMaioridade, o que retorna falso porque 17 n√£o √© maior e nem igual a 18
	
const verificaIdade = idadeDaPessoa === 17; // aqui estamos comparando se idadeDaPessoa √© igual a 17, o que √© verdade, retornando true
//Nesse caso, temos o seguinte cen√°rio:

//verificaMaioridade recebe o valor false, pois √© o resultado da compara√ß√£o entre idadeDaPessoa e idadeMaioridade, ou seja, 17 n√£o √© maior e nem igual a 18.
//verificaIdade recebe o valor true, pois √© o resultado da compara√ß√£o entre idadeDaPessoa e o n√∫mero 17, ou seja, 17 √© igual a 17.
//Agora que j√° vimos quais s√£o as atividades de compara√ß√£o e como formular uma express√£o - ou pergunta -, vamos nos aprofundar no funcionamento dos operadores. Bora l√°? üí™
let operadorIgualdade = '===';
//O operador ===, chamado de ‚Äúoperador de igualdade estrita‚Äù, √© utilizado para comparar dois valores. Veja o exemplo abaixo:


const cidade = 'Belo Horizonte';

const verificaCidade = cidade === 'Belo Horizonte';

console.log(verificaCidade);
//Vamos analisar o c√≥digo:

//A vari√°vel cidade est√° recebendo o valor ‚ÄòBelo Horizonte‚Äô. Esse valor √© uma string com ordem espec√≠fica de caracteres;
//A vari√°vel verificaCidade est√° recebendo o resultado da compara√ß√£o entre a vari√°vel cidade e a string ‚ÄòBelo Horizonte‚Äô, que retorna true, pois segue a mesma ordem de caracteres;
//Se voc√™ executar o console.log(verificaCidade), ver√° que o resultado no console ser√° true.
//Anota a√≠ üì£: O operador === s√≥ compara valores do mesmo tipo primitivo. Com isso, voc√™ deve comparar uma string somente com outra string e um number somente com outro number.
let operadorDiferenteDe = '!==';
//Agora, veremos sobre o operador !==. Aperte os cintos e bora rumo a mais conhecimentos! üöÄ

//√â poss√≠vel considerar o operador !== o oposto do operador ===, ou seja, !== √© diferen√ßa estrita e === √© igualdade estrita.

//De olho na dica üëÄ : Voc√™ pode chamar o operador !== de diferente de. Al√©m disso, esse operador leva em considera√ß√£o o tipo primitivo dos valores, assim como o operador ===.

//Veja o exemplo:


const nomeDoCachorro = 'Pipoca';

const verificaNomeCachorro = nomeDoCachorro !== 'Pipoca'; // o valor da vari√°vel nomeDoCachorro √© diferente de Pipoca?

console.log(verificaNomeCachorro); // false
//Vamos analisar:

//A vari√°vel verificaNomeCachorro est√° recebendo o resultado da compara√ß√£o entre o valor da vari√°vel nomeDoCachorro com o valor ‚ÄòPipoca‚Äô. Com isso, temos a seguinte pergunta: O valor da vari√°vel nomeDoCachorro √© diferente de ‚ÄòPipoca‚Äô?
//A resposta √©: n√£o, s√£o valores iguais!

//Portanto, o valor da vari√°vel verificaNomeCachorro √© false, porque n√£o atendeu √† compara√ß√£o de diferen√ßa, sacou?

//Sendo assim, o que ser√° impresso pelo console.log(verificaNomeCachorro); √© false, pois os dois valores s√£o iguais.

//Anota a√≠ üì£: O operador !== verifica se os valores s√£o diferentes; desse modo, se um valor for diferente do outro, ele retorna true, e se for igual, retornar√° false.

let operadorMaiorQueEMenorque = "< >";
//chegou a hora de vermos sobre o operador >! Ele √© utilizado quando queremos verificar se um valor √© maior do que outro valor. Observe o exemplo a seguir, que compara a idade de uma pessoa com a classifica√ß√£o indicativa de um filme:


const classificacaoIndicativa = 14;

const idadeDaPessoa = 15;

const verificaidade = idadeDaPessoa > classificacaoIndicativa;

console.log(verificaidade);
//Na express√£o acima, voc√™ est√° comparando se a idadeDaPessoa √© maior do que classificacaoIndicativa, e o resultado √© true, pois a classifica√ß√£o indicativa do filme √© de 14 anos, e a idadeDaPessoa √© 15 anos, ou seja, 15 √© maior que 14.

//Caso a idadeDaPessoa seja maior do que a classificacaoIndicativa, o resultado atribu√≠do a verificaIdade ser√° true.
//e olho na dica üëÄ : Lembre-se de que √© poss√≠vel construir a express√£o de acordo com sua l√≥gica, desde que siga a estrutura [valor] [operador] [valor]!

//Como vou conseguir lembrar que o operador > √© maior e o < √© menor? ü§î

//Temos uma dica pra voc√™: Observe que o s√≠mbolo de > parece o bico de um p√°ssaro. Com isso voc√™ pode fazer a seguinte rela√ß√£o:

//O p√°ssaro maior > alimenta o p√°ssaro menor;
//O p√°ssaro menor < √© alimentado pelo maior.
